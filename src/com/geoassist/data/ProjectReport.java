package com.geoassist.data;

import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import android.os.Environment;
import android.util.Log;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

public class ProjectReport {
	  private static String  fileName = Environment.getExternalStorageDirectory()+ "/report.pdf";
	  private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,Font.BOLD);
	  private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
	  private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,Font.BOLD);
	  private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,Font.BOLD);
	  
	  public String getFileName() {
		return fileName;
	  }

	  public void save(Project crntProj) {
		  try {
			  Document document = new Document();
		      Log.e("WRITER", "File is " + fileName);
		      PdfWriter.getInstance(document, new FileOutputStream(fileName));
		      Log.e("WRITER", "Opening" + fileName);
		      document.open();
		      Log.e("WRITER", "Adding Meta " + fileName);
		      addMetaData(document, crntProj);
		      Log.e("WRITER", "Adding Title " + fileName);
		      addTitlePage(document, crntProj);
		      Log.e("WRITER", "Adding Content " + fileName);
		      addContent(document, crntProj);
		      Log.e("WRITER", "Closing " + fileName);
		      document.close();
		      Log.e("WRITER", "Closed");
		    } catch (Exception e) {
		    	Log.e("WRITER", "Exception " + fileName);
		    	e.printStackTrace();
		    }
		  }

		  private static void addMetaData(Document document, Project crntProj) {
			  document.addTitle("Geology Field Reporrt");
			  document.addSubject("Using iText");
			  document.addKeywords("Java, PDF, iText");
			  document.addAuthor(crntProj.scientistName);
			  document.addCreator(crntProj.scientistName);
		  }

		  private static void addTitlePage(Document document, Project crntProj)throws DocumentException  {
			  Paragraph preface = new Paragraph();
			  addEmptyLine(preface, 1);
			  preface.add(new Paragraph("Field Report for Geology Department ", catFont));
			  addEmptyLine(preface, 1);
			  preface.add(new Paragraph("Report generated by: " + 
					  crntProj.scientistName+ ", " 
		    						+ new Date(), 
		    						smallBold));
			  addEmptyLine(preface, 3);
			  SimpleDateFormat df = new SimpleDateFormat("MM-dd-yyyy");
			  String dateStr = df.format(Calendar.getInstance().getTime());
			  
			  preface.add(new Paragraph("This is field data from  " + crntProj.location + " Recorded on :" + dateStr, 
		    						smallBold));
			  addEmptyLine(preface, 8);
			  preface.add(new Paragraph("This document is not ready yet. It is an experimentation to verify pdf generation.",
		    							redFont));
			  document.add(preface);
			  document.newPage();
		  }

		  private static void addContent(Document document , Project crntProj) throws DocumentException {
		    String rockTypeInfo = "Igneous Rock";
			Anchor anchor = new Anchor("First Chapter", catFont);
		    anchor.setName("Rock Information");

		    // Second parameter is the number of the chapter
		    Log.e("Inside Content", "Start");
		    Chapter catPart = new Chapter(new Paragraph(anchor), 1);
		    if (crntProj.rockType == RockType.IGNEOUS) {
		    	rockTypeInfo = "Rock Type Igneous";
		    }
		    Paragraph subPara = new Paragraph(rockTypeInfo, subFont);
		    Section subCatPart = catPart.addSection(subPara);
		    subCatPart.add(new Paragraph("Minerals Details"));
		    Log.e("Inside Content", "Minerals");
//		    createTable(subCatPart, crntProj);
		    Log.e("Inside Content", "TableDone");

		    // now add all this to the document
		    document.add(catPart);
		    Log.e("Inside Content", "Table Added");

		    // Next section
//		    anchor = new Anchor("Second Chapter", catFont);
//		    anchor.setName("Second Chapter");
//
//		    // Second parameter is the number of the chapter
//		    catPart = new Chapter(new Paragraph(anchor), 1);
//
//		    subPara = new Paragraph("Subcategory", subFont);
//		    subCatPart = catPart.addSection(subPara);
//		    subCatPart.add(new Paragraph("This is a very important message"));
//
//		    // now add all this to the document
//		    document.add(catPart);

		  }

		  private static void createTable(Section subCatPart, Project currProject)
		      throws BadElementException {
		    PdfPTable table = new PdfPTable(3);

		    // t.setBorderColor(BaseColor.GRAY);
		    // t.setPadding(4);
		    // t.setSpacing(4);
		    // t.setBorderWidth(1);

		    PdfPCell c1 = new PdfPCell(new Phrase("Mineral Name"));
		    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		    table.addCell(c1);

		    c1 = new PdfPCell(new Phrase("Minumum Grain"));
		    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		    table.addCell(c1);

		    c1 = new PdfPCell(new Phrase("Maximum Grain"));
		    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		    table.addCell(c1);
		    table.setHeaderRows(1);

			for (int i = 0; i < currProject.minerals.size(); i++) {
				Mineral m = currProject.minerals.get(i);
			    table.addCell(m.mineralName);
			    table.addCell(String.valueOf(m.minGrainSize) );
			    table.addCell(String.valueOf(m.maxGrainSize) );
			}
		    subCatPart.add(table);

		  }

//		  private static void createList(Section subCatPart) {
//		    List list = new List(true, false, 10);
//		    list.add(new ListItem("First point"));
//		    list.add(new ListItem("Second point"));
//		    list.add(new ListItem("Third point"));
//		    subCatPart.add(list);
//		  }

		  private static void addEmptyLine(Paragraph paragraph, int number) {
		    for (int i = 0; i < number; i++) {
		      paragraph.add(new Paragraph(" "));
		    }
		  }
}
